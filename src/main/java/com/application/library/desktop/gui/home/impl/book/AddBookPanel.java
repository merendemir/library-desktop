package com.application.library.desktop.gui.home.impl.book;

import com.application.library.desktop.constants.MessageConstants;
import com.application.library.desktop.enumerations.NotificationType;
import com.application.library.desktop.gui.home.impl.panel.main.IMainPanel;
import com.application.library.desktop.gui.home.impl.shelf.ShelvesPanelCreateService;
import com.application.library.desktop.listener.event.NotificationEvent;
import com.application.library.desktop.request.dto.CreateBookRequestDto;
import com.application.library.desktop.service.HttpRequestService;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;

import javax.swing.*;
import java.awt.*;

@Service
public class AddBookPanel extends JPanel implements IMainPanel {

    private final SaveBookPanel saveBookPanel;
    private final HttpRequestService httpRequestService;
    private final ApplicationEventPublisher applicationEventPublisher;


    public AddBookPanel(BooksPanelCreateService booksPanelCreateService, HttpRequestService httpRequestService, ApplicationEventPublisher applicationEventPublisher) {
        saveBookPanel = booksPanelCreateService.createNewSaveBooksPanel();
        this.httpRequestService = httpRequestService;
        this.applicationEventPublisher = applicationEventPublisher;
        $$$setupUI$$$();
        setLayout(new BorderLayout());
        add(contentPane, BorderLayout.CENTER);

        setComponentActions();
    }

    private void setComponentActions() {
        saveButton.addActionListener(e -> {
            CreateBookRequestDto createBookRequestDto = saveBookPanel.getCreateBookRequestDto();
            if (createBookRequestDto.getName() == null || createBookRequestDto.getIsbn() == null || createBookRequestDto.getShelfId() == null) {
                applicationEventPublisher.publishEvent(new NotificationEvent(this, MessageConstants.BOOK_SAVE_NAME_ISBN_AND_SHELF_REQUIRED, NotificationType.WARNING));
                return;
            }

            Long id = httpRequestService.saveBook(createBookRequestDto);
            if (id != null) {
                applicationEventPublisher.publishEvent(new NotificationEvent(this, MessageConstants.BOOK_SAVE_SUCCESS, NotificationType.SUCCESS));
                saveBookPanel.clearFields();
            }
        });
    }

    private void createUIComponents() {
        saveBookPanelGUI = saveBookPanel;
    }

    @Override
    public void selected() {
        saveBookPanel.clearFields();
    }

    //COMPONENTS
    private JPanel contentPane;
    private JPanel saveBookPanelGUI;
    private JButton saveButton;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(saveBookPanelGUI, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        saveButton = new JButton();
        saveButton.setText("SAVE");
        panel1.add(saveButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        contentPane.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
