package com.application.library.desktop.gui.home.impl.account.button;

import com.application.library.desktop.constants.MessageConstants;
import com.application.library.desktop.constants.SystemVariables;
import com.application.library.desktop.constants.TitleConstants;
import com.application.library.desktop.core.BaseDialog;
import com.application.library.desktop.dto.UserInformation;
import com.application.library.desktop.enumerations.ApplicationFrames;
import com.application.library.desktop.enumerations.NotificationType;
import com.application.library.desktop.listener.event.ChangeFrameEvent;
import com.application.library.desktop.listener.event.NotificationEvent;
import com.application.library.desktop.request.dto.user.BaseUserSaveRequestDto;
import com.application.library.desktop.service.HttpRequestService;
import com.application.library.desktop.utils.ApplicationContextHelper;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;

import javax.swing.*;
import java.awt.*;

@Service
public class UpdateActiveUserAccountDialog extends BaseDialog {
    private final UserDetailsPanel userDetailsPanel = new UserDetailsPanel(this::updateButtonOKStatus);
    private final ApplicationContextHelper applicationContextHelper;
    private final HttpRequestService httpRequestService;
    private final ApplicationEventPublisher applicationEventPublisher;
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JPanel userDetailsGUI;

    public UpdateActiveUserAccountDialog(ApplicationContextHelper applicationContextHelper, HttpRequestService httpRequestService, ApplicationEventPublisher applicationEventPublisher) {
        this.applicationContextHelper = applicationContextHelper;
        this.httpRequestService = httpRequestService;
        this.applicationEventPublisher = applicationEventPublisher;
        $$$setupUI$$$();
        setContentPane(contentPane);
        setModal(true);
        setTitle(TitleConstants.UPDATE_ACCOUNT);
        getRootPane().setDefaultButton(buttonOK);
        buttonOK.addActionListener(e -> onOK());
        buttonCancel.addActionListener(e -> dispose());

        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        updateButtonOKStatus();
    }

    public void showDialog() {
        userDetailsPanel.clear();
        UserInformation userInformation = SystemVariables.USER_INFORMATION;
        userDetailsPanel.setFirstName(userInformation.getFirstName());
        userDetailsPanel.setLastName(userInformation.getLastName());
        userDetailsPanel.setEmailText(userInformation.getEmail());


        pack();
        setLocationRelativeTo(applicationContextHelper.getCurrentFrame());
        setResizable(false);
        setVisible(true);
    }

    private void updateButtonOKStatus() {
        buttonOK.setEnabled(
                !userDetailsPanel.getEmailText().isEmpty() &&
                        userDetailsPanel.getPassword().length > 0 &&
                        !userDetailsPanel.getFirstName().isEmpty() &&
                        !userDetailsPanel.getLastName().isEmpty()
        );
    }

    private void onOK() {
        Long id = httpRequestService.updateActiveUserInfo(new BaseUserSaveRequestDto(
                userDetailsPanel.getEmailText(),
                userDetailsPanel.getFirstName(),
                userDetailsPanel.getLastName(),
                new String(userDetailsPanel.getPassword())
        ));

        if (id != null) {
            applicationEventPublisher.publishEvent(new ChangeFrameEvent(this, ApplicationFrames.LOGIN_FRAME));
            applicationEventPublisher.publishEvent(new NotificationEvent(this, MessageConstants.UPDATE_ACCOUNT_SUCCESS, NotificationType.SUCCESS));
            dispose();
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        contentPane.add(userDetailsGUI, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    private void createUIComponents() {
        userDetailsGUI = userDetailsPanel;
    }
}
