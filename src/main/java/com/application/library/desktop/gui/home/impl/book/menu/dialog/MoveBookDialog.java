package com.application.library.desktop.gui.home.impl.book.menu.dialog;

import com.application.library.desktop.constants.MessageConstants;
import com.application.library.desktop.constants.TitleConstants;
import com.application.library.desktop.enumerations.NotificationType;
import com.application.library.desktop.gui.home.impl.book.BookOperationsPanel;
import com.application.library.desktop.gui.home.impl.shelf.ShelvesPanelCreateService;
import com.application.library.desktop.gui.home.impl.shelf.ShowShelvesPanel;
import com.application.library.desktop.listener.event.NotificationEvent;
import com.application.library.desktop.listener.event.UpdatePanelDataEvent;
import com.application.library.desktop.request.view.book.BookDTO;
import com.application.library.desktop.service.HttpRequestService;
import com.application.library.desktop.utils.ApplicationContextHelper;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;

import javax.swing.*;
import java.awt.*;
import java.util.Objects;

@Service
public class MoveBookDialog extends JDialog {

    private BookDTO selectedBook;

    private final ShowShelvesPanel showShelvesPanel;
    private final ApplicationContextHelper applicationContextHelper;
    private final ApplicationEventPublisher applicationEventPublisher;
    private final HttpRequestService httpRequestService;

    public MoveBookDialog(ShelvesPanelCreateService shelvesPanelCreateService, ApplicationContextHelper applicationContextHelper, ApplicationEventPublisher applicationEventPublisher, HttpRequestService httpRequestService) {
        this.showShelvesPanel = shelvesPanelCreateService.createNewShelvesPanel();
        this.applicationContextHelper = applicationContextHelper;
        this.applicationEventPublisher = applicationEventPublisher;
        this.httpRequestService = httpRequestService;
        $$$setupUI$$$();

        setTitle(TitleConstants.MOVE_BOOK);
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);
        buttonOK.addActionListener(e -> onOK());
    }

    public void showDialog(BookDTO bookDTO) {
        this.selectedBook = bookDTO;
        showShelvesPanel.selected();
        pack();

        setLocationRelativeTo(applicationContextHelper.getCurrentFrame());
        setVisible(true);
    }

    private void onOK() {
        Long newShelfId = showShelvesPanel.getSelectedShelf().getId();

        if (Objects.equals(newShelfId, selectedBook.getShelf().getId())) {
            applicationEventPublisher.publishEvent(new NotificationEvent(this, MessageConstants.BOOK_ALREADY_ON_THIS_SHELF, NotificationType.WARNING));
            return;
        }

        Long id = httpRequestService.moveBook(selectedBook.getId(), newShelfId);

        if (id != null) {
            applicationEventPublisher.publishEvent(new NotificationEvent(this, MessageConstants.BOOK_MOVED_SUCCESSFULLY, NotificationType.SUCCESS));
            applicationEventPublisher.publishEvent(new UpdatePanelDataEvent(this, BookOperationsPanel.class));

            dispose();
        }
    }

    //COMPONENTS
    private JPanel contentPane;
    private JButton buttonOK;
    private JPanel shelvesPanelGUI;

    private void createUIComponents() {
        shelvesPanelGUI = showShelvesPanel;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        contentPane.add(shelvesPanelGUI, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
