package com.application.library.desktop.gui.home;

import com.application.library.desktop.constants.TitleConstants;
import com.application.library.desktop.core.BaseFrame;
import com.application.library.desktop.core.IBaseFrame;
import com.application.library.desktop.enumerations.MenuOptions;
import com.application.library.desktop.enumerations.NotificationType;
import com.application.library.desktop.gui.common.ShowNotificationFrame;
import com.application.library.desktop.gui.header.ApplicationHeaderPanel;
import com.application.library.desktop.gui.home.impl.account.button.UserButton;
import com.application.library.desktop.gui.home.impl.panel.main.MainPanel;
import com.application.library.desktop.gui.menu.MenuTree;
import com.application.library.desktop.service.TaskExecutorService;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.springframework.stereotype.Service;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.util.concurrent.TimeUnit;

@Service
public class MainFrame extends BaseFrame implements ShowNotificationFrame, IBaseFrame {
    private final ApplicationHeaderPanel applicationHeaderPanel = new ApplicationHeaderPanel();
    private final MenuTree menuTree;
    private final MainPanel operationsPanel;
    private final UserButton userButton;

    public MainFrame(MenuTree menuTree, MainPanel operationsPanel, UserButton userButton) {
        this.menuTree = menuTree;
        this.operationsPanel = operationsPanel;
        this.userButton = userButton;

        $$$setupUI$$$();
        setTitle(TitleConstants.MAIN_FRAME);
        setContentPane(contentPane);

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }


    public void updateCardLayout(MenuOptions menuOption) {
        operationsPanel.updateCardLayout(menuOption);
    }

    @Override
    public void showNotification(String message, NotificationType type, int timeInSecond) {
        applicationHeaderPanel.showNotification(message, type);
        TaskExecutorService.schedule(applicationHeaderPanel::hideNotification, timeInSecond, TimeUnit.SECONDS);
    }

    @Override
    public void showFrame() {
        setSize(new Dimension(1000, 500));
        setMinimumSize(getSize());
        setLocationRelativeTo(null);
        setVisible(true);
        operationsPanel.updateCardLayout(MenuOptions.HOME);
    }

    private JPanel contentPane;
    private JPanel applicationHeaderPanelGUI;
    private JTree menuTreeGUI;
    private JPanel operationsPanelGUI;
    private JButton userButtonGUI;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 4, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(applicationHeaderPanelGUI, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        contentPane.add(spacer1, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        contentPane.add(spacer2, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.add(menuTreeGUI, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        contentPane.add(operationsPanelGUI, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        userButtonGUI.setText("");
        panel2.add(userButtonGUI, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    private void createUIComponents() {
        applicationHeaderPanelGUI = applicationHeaderPanel;
        menuTreeGUI = menuTree;
        operationsPanelGUI = operationsPanel;
        userButtonGUI = userButton;
    }

}
