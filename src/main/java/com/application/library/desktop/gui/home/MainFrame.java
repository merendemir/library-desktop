package com.application.library.desktop.gui.home;

import com.application.library.desktop.constants.TitleConstants;
import com.application.library.desktop.core.BaseFrame;
import com.application.library.desktop.core.IBaseFrame;
import com.application.library.desktop.enumerations.MenuOptions;
import com.application.library.desktop.enumerations.NotificationType;
import com.application.library.desktop.gui.common.ShowNotificationFrame;
import com.application.library.desktop.gui.header.ApplicationHeaderPanel;
import com.application.library.desktop.gui.home.impl.BooksPanel;
import com.application.library.desktop.gui.home.tree.MenuTree;
import com.application.library.desktop.service.TaskExecutorService;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.springframework.stereotype.Service;

import javax.swing.*;
import java.awt.*;
import java.util.concurrent.TimeUnit;

@Service
public class MainFrame extends BaseFrame implements ShowNotificationFrame, IBaseFrame {
    private final ApplicationHeaderPanel applicationHeaderPanel = new ApplicationHeaderPanel();
    private final BooksPanel booksPanel = new BooksPanel();
    private final MenuTree menuTree;

    public MainFrame(MenuTree menuTree) {
        this.menuTree = menuTree;

        $$$setupUI$$$();
        setTitle(TitleConstants.MAIN_FRAME);
        setContentPane(contentPane);

        setCardNames();
        updateCardLayout(MenuOptions.MENU);

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//        setVisible(true);
    }


    public void updateCardLayout(MenuOptions menuOption) {
        System.out.println("MenuOption: " + menuOption.getCardName());
        CardLayout cardLayout = (CardLayout) operationsPanel.getLayout();
        cardLayout.show(operationsPanel, menuOption.getCardName());
    }

    private void setCardNames() {
        operationsPanel.add(MenuOptions.MENU.getCardName(), booksPanel);
        operationsPanel.add(MenuOptions.BOOKS.getCardName(), booksPanel);
        operationsPanel.add(MenuOptions.ADD_BOOK.getCardName(), booksPanel);
    }

    @Override
    public void showNotification(String message, NotificationType type, int timeInSecond) {
        applicationHeaderPanel.showNotification(message, type);
        TaskExecutorService.schedule(applicationHeaderPanel::hideNotification, timeInSecond, TimeUnit.SECONDS);
    }

    @Override
    public void showFrame() {
        setSize(new Dimension(1000, 1000));
        setMinimumSize(getSize());
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private JPanel contentPane;
    private JPanel applicationHeaderPanelGUI;
    private JTree menuTreeGUI;
    private JPanel operationsPanel;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(applicationHeaderPanelGUI, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        contentPane.add(spacer1, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        contentPane.add(spacer2, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.add(menuTreeGUI, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        operationsPanel = new JPanel();
        operationsPanel.setLayout(new CardLayout(0, 0));
        contentPane.add(operationsPanel, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    private void createUIComponents() {
        applicationHeaderPanelGUI = applicationHeaderPanel;
        menuTreeGUI = menuTree;
    }

}
