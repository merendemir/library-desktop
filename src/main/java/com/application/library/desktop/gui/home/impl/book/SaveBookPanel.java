package com.application.library.desktop.gui.home.impl.book;

import com.application.library.desktop.gui.home.impl.shelf.ShowShelvesPanel;
import com.application.library.desktop.request.dto.CreateBookRequestDto;
import com.application.library.desktop.request.view.book.BookDTO;
import com.application.library.desktop.request.view.shelf.ShelfDTO;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;


public class SaveBookPanel extends JPanel {
    private Long selectedShelfId;
    private final SelectShelfForBookDialog selectShelfForBookDialog;

    protected SaveBookPanel(ShowShelvesPanel showShelvesPanel) {
        selectShelfForBookDialog = new SelectShelfForBookDialog(showShelvesPanel);
        setLayout(new BorderLayout());
        add(contentPane, BorderLayout.CENTER);

        setComponentActions();
    }

    private void setComponentActions() {
        JFormattedTextField totalCountSpinnerTextField = ((JSpinner.DefaultEditor) totalCountSpinner.getEditor()).getTextField();
        totalCountSpinnerTextField.setEditable(false);

        JFormattedTextField pageCountSpinnerTextField = ((JSpinner.DefaultEditor) pageCountSpinner.getEditor()).getTextField();
        pageCountSpinnerTextField.setEditable(false);

        totalCountSpinner.setModel(new SpinnerNumberModel(0, 0, 999999, 1));
        pageCountSpinner.setModel(new SpinnerNumberModel(0, 0, 999999, 1));

        selectShelfButton.addActionListener(e -> {
            selectShelfForBookDialog.showDialog(this);
            ShelfDTO selectedShelf = selectShelfForBookDialog.getSelectedShelf();
            if (selectedShelf != null) {
                selectedShelfLabel.setText(selectedShelf.getName());
                selectedShelfId = selectedShelf.getId();
            } else {
                selectedShelfLabel.setText("");
                selectedShelfId = null;
            }
        });
    }

    public CreateBookRequestDto getCreateBookRequestDto() {
        CreateBookRequestDto createBookRequestDto = new CreateBookRequestDto();
        createBookRequestDto.setName(nameField.getText());
        createBookRequestDto.setIsbn(isbnField.getText());
        createBookRequestDto.setAuthor(authorField.getText());
        createBookRequestDto.setPageCount((int) pageCountSpinner.getValue());
        createBookRequestDto.setPublisher(publisherField.getText());
        createBookRequestDto.setPublishedAt(publishedDateField.getText());
        createBookRequestDto.setLanguage(languageField.getText());
        createBookRequestDto.setDescription(descriptionField.getText());
        createBookRequestDto.setImageUrl(imageUrlField.getText());
        createBookRequestDto.setTotalCount((int) totalCountSpinner.getValue());
        createBookRequestDto.setShelfId(selectedShelfId);
        return createBookRequestDto;
    }

    public void fillFields(BookDTO selectedBook) {
        if (selectedBook == null) {
            clearFields();
            return;
        }

        nameField.setText(selectedBook.getName());
        isbnField.setText(selectedBook.getIsbn());
        authorField.setText(selectedBook.getAuthor());
        pageCountSpinner.setValue(selectedBook.getPageCount());
        publisherField.setText(selectedBook.getPublisher());
        publishedDateField.setText(selectedBook.getPublishedAt());
        languageField.setText(selectedBook.getLanguage());
        descriptionField.setText(selectedBook.getDescription());
        imageUrlField.setText(selectedBook.getImageUrl());
        totalCountSpinner.setValue(selectedBook.getTotalCount());
        selectedShelfLabel.setText(selectedBook.getShelf().getName());
        selectedShelfId = selectedBook.getShelf().getId();
    }

    public void clearFields() {
        nameField.setText("");
        isbnField.setText("");
        authorField.setText("");
        pageCountSpinner.setValue(0);
        publisherField.setText("");
        publishedDateField.setText("");
        languageField.setText("");
        descriptionField.setText("");
        imageUrlField.setText("");
        totalCountSpinner.setValue(0);
        selectedShelfLabel.setText("");
        selectedShelfId = null;
    }


    //COMPONENTS
    private JScrollPane contentPane;
    private JTextField nameField;
    private JSpinner totalCountSpinner;
    private JTextField authorField;
    private JTextField isbnField;
    private JTextField publisherField;
    private JTextField publishedDateField;
    private JTextField descriptionField;
    private JTextField languageField;
    private JTextField imageUrlField;
    private JButton selectShelfButton;
    private JLabel selectedShelfLabel;
    private JSpinner pageCountSpinner;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JScrollPane();
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(11, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.setViewportView(panel1);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Name", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION, null, null));
        nameField = new JTextField();
        panel2.add(nameField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel3.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Author", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION, null, null));
        authorField = new JTextField();
        panel3.add(authorField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel4, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel4.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "ISBN", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION, null, null));
        isbnField = new JTextField();
        panel4.add(isbnField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel5, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel5.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Page Count", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION, null, null));
        pageCountSpinner = new JSpinner();
        panel5.add(pageCountSpinner, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel6, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel6.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Publisher", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION, null, null));
        publisherField = new JTextField();
        panel6.add(publisherField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel7, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel7.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Published Date", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION, null, null));
        publishedDateField = new JTextField();
        publishedDateField.setText("");
        panel7.add(publishedDateField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel8 = new JPanel();
        panel8.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel8, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel8.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Language", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION, null, null));
        languageField = new JTextField();
        panel8.add(languageField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel9 = new JPanel();
        panel9.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel9, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel9.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Image Url", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION, null, null));
        imageUrlField = new JTextField();
        panel9.add(imageUrlField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel10 = new JPanel();
        panel10.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel10, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel10.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Total Count", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION, null, null));
        totalCountSpinner = new JSpinner();
        panel10.add(totalCountSpinner, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel11 = new JPanel();
        panel11.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel11, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel11.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Description", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION, null, null));
        descriptionField = new JTextField();
        panel11.add(descriptionField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel12 = new JPanel();
        panel12.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel12, new GridConstraints(10, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel12.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Shelf", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION, null, null));
        selectShelfButton = new JButton();
        selectShelfButton.setText("Select Shelf");
        panel12.add(selectShelfButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel13 = new JPanel();
        panel13.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel12.add(panel13, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel13.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        selectedShelfLabel = new JLabel();
        selectedShelfLabel.setText("");
        panel13.add(selectedShelfLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel12.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
