package com.application.library.desktop.gui.home.impl.user.menu;

import com.application.library.desktop.constants.MessageConstants;
import com.application.library.desktop.constants.TitleConstants;
import com.application.library.desktop.core.BaseDialog;
import com.application.library.desktop.enumerations.NotificationType;
import com.application.library.desktop.gui.home.impl.user.UserPanel;
import com.application.library.desktop.gui.home.impl.user.UsersPanel;
import com.application.library.desktop.listener.event.NotificationEvent;
import com.application.library.desktop.listener.event.UpdatePanelDataEvent;
import com.application.library.desktop.request.view.UserDTO;
import com.application.library.desktop.service.HttpRequestService;
import com.application.library.desktop.utils.ApplicationContextHelper;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;

import javax.swing.*;
import java.awt.*;

@Service
public class UpdateUserDialog extends BaseDialog {
    private final UserPanel userPanel = new UserPanel(this::onSave);
    private final ApplicationContextHelper applicationContextHelper;
    private final HttpRequestService httpRequestService;
    private final ApplicationEventPublisher applicationEventPublisher;

    private Long userId;

    public UpdateUserDialog(ApplicationContextHelper applicationContextHelper, HttpRequestService httpRequestService, ApplicationEventPublisher applicationEventPublisher) {
        this.applicationContextHelper = applicationContextHelper;
        this.httpRequestService = httpRequestService;
        this.applicationEventPublisher = applicationEventPublisher;
        $$$setupUI$$$();
        setContentPane(contentPane);
        setModal(true);
        setTitle(TitleConstants.UPDATE_USER);

        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    public void showDialog(UserDTO userDTO) {
        userId = userDTO.getId();
        userPanel.selected();
        userPanel.fillValues(userDTO);
        pack();
        setLocationRelativeTo(applicationContextHelper.getCurrentFrame());
        setResizable(false);
        setVisible(true);
    }

    private void onSave() {
        Long id = httpRequestService.updateUserInfo(userId, userPanel.getUserSaveRequestDto());

        if (id != null) {
            applicationEventPublisher.publishEvent(new UpdatePanelDataEvent(this, UsersPanel.class));
            applicationEventPublisher.publishEvent(new NotificationEvent(this, MessageConstants.USER_UPDATE_SUCCESS, NotificationType.SUCCESS));
            dispose();
        }
    }

    ///COMPONENTS
    private JPanel contentPane;
    private JPanel userDetailsGUI;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.add(userDetailsGUI, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    private void createUIComponents() {
        userDetailsGUI = userPanel;
    }
}
