package com.application.library.desktop.gui.home.impl.book.menu.dialog;

import com.application.library.desktop.constants.MessageConstants;
import com.application.library.desktop.constants.TitleConstants;
import com.application.library.desktop.core.BaseDialog;
import com.application.library.desktop.enumerations.NotificationType;
import com.application.library.desktop.gui.home.impl.book.BookOperationsPanel;
import com.application.library.desktop.gui.home.impl.book.BooksPanelCreateService;
import com.application.library.desktop.gui.home.impl.book.SaveBookPanel;
import com.application.library.desktop.gui.home.impl.shelf.ShelvesOperationPanel;
import com.application.library.desktop.listener.event.NotificationEvent;
import com.application.library.desktop.listener.event.UpdatePanelDataEvent;
import com.application.library.desktop.request.dto.SaveBookRequestDto;
import com.application.library.desktop.request.dto.SaveShelfRequestDto;
import com.application.library.desktop.request.view.book.BookDTO;
import com.application.library.desktop.service.HttpRequestService;
import com.application.library.desktop.utils.ApplicationContextHelper;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;

import javax.swing.*;
import java.awt.*;

@Service
public class UpdateBookDialog extends BaseDialog {

    private BookDTO selectedBook;

    private final SaveBookPanel saveBookPanel;
    private final ApplicationContextHelper applicationContextHelper;
    private final HttpRequestService httpRequestService;
    private final ApplicationEventPublisher applicationEventPublisher;

    public UpdateBookDialog(BooksPanelCreateService booksPanelCreateService, ApplicationContextHelper applicationContextHelper, HttpRequestService httpRequestService, ApplicationEventPublisher applicationEventPublisher) {
        this.saveBookPanel = booksPanelCreateService.createNewSaveBooksPanel();

        $$$setupUI$$$();
        this.applicationContextHelper = applicationContextHelper;
        this.httpRequestService = httpRequestService;
        this.applicationEventPublisher = applicationEventPublisher;

        setContentPane(contentPane);
        setModal(true);
        setTitle(TitleConstants.UPDATE_BOOK);

        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setComponentsActions();
    }

    private void setComponentsActions() {
        updateButton.addActionListener(e -> onUpdateBook());
    }

    public void showDialog(BookDTO selectedBook) {
        this.selectedBook = selectedBook;
        saveBookPanel.fillFields(selectedBook);

        pack();
        setLocationRelativeTo(applicationContextHelper.getCurrentFrame());
        setVisible(true);
    }

    //COMPONENTS
    private JPanel contentPane;
    private JButton updateButton;
    private JPanel showBookPanelGUI;

    private void createUIComponents() {
        showBookPanelGUI = saveBookPanel;
    }

    private void onUpdateBook() {
        SaveBookRequestDto saveBookRequestDto = saveBookPanel.getCreateBookRequestDto();

        Long id = httpRequestService.updateBookById(selectedBook.getId(), saveBookRequestDto);

        if (id != null) {
            dispose();
            applicationEventPublisher.publishEvent(new UpdatePanelDataEvent(this, BookOperationsPanel.class));
            applicationEventPublisher.publishEvent(new NotificationEvent(this, MessageConstants.BOOK_UPDATE_SUCCESS, NotificationType.SUCCESS));
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 2, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.add(showBookPanelGUI, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        updateButton = new JButton();
        updateButton.setText("Update");
        panel1.add(updateButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        contentPane.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
